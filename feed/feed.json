{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Shane Dewar - Software Developer",
	"language": "en",
	"home_page_url": "https://shanedewar.com/",
	"feed_url": "https://shanedewar.com/feed/feed.json",
	"description": "Join me in my explorations in computer science.",
	"author": {
		"name": "Shane Dewar",
		"url": "https://shanedewar.com/about-me/"
	},
	"items": [
		{
			"id": "https://shanedewar.com/blog/live-chat-python-flask-socketio/",
			"url": "https://shanedewar.com/blog/live-chat-python-flask-socketio/",
			"title": "Live Chat with Python, Flask and Flask-SocketIO.",
			"content_html": "<h1 id=\"\" tabindex=\"-1\"><Live-Chat-Python-Flask-SocketIO> <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></Live-Chat-Python-Flask-SocketIO></h1>\n<h2 id=\"description\" tabindex=\"-1\">Description <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>This project was created to experiment with a light real time chat program which works in a browser using Flask. The SocketIO protocol appeared as a great option after a little investigation and the direction I decided to pursue. There are numerous implementations of the SocketIO protocol and I chose to use the flask-socketio package which provides &quot;low latency bi-directional communications between the clients and the server.&quot; This was exactly what I was looking for. Additionally, by using the SocketIO protocol, clients have already been  implemented in Python, JavaScript, Swift, Java, C++, and as long as the SocketIO client protocol is implemented a client can be built for a huge array of platforms.</p>\n<p>A feature I found attractive about SocketIO besides the low latency event based messaging was the ability to message to groups of users by rooms. This fit into the &quot;chat room&quot; concept very neatly and made SocketIO the clear choice. It was easy to find a good guide fitting the concept from <a href=\"https://www.youtube.com/@TechWithTim\">Tech With Tim's</a> <a href=\"https://www.youtube.com/watch?v=mkXdvs8H7TA\">Python Live Chat Room Tutorial Using Flask &amp; SocketIO</a>. I used the tutorial as a starting point and have extended it slightly. I added a Leave Room button and server side timestamp generation which is stored with the messages as they're sent. I decided this would be a good simple project to build out a more involved GitHub README setup guide for after getting the project up and running.</p>\n<p>Some potential future features could be users having the ability to name the chatrooms, perhaps enabling different colors for each user name or some other way to make users easier to distinguish when talking in a room, and adding a database to store messages in a persistant way. Additionally, I am not sold on the message log storage implementaton and think that I would modify it to display a fixed amount of previous messages upon joining a room to limit server load, storage size, and latency to the user.</p>\n<h2 id=\"table-of-contents\" tabindex=\"-1\">Table of Contents <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Installation</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Usage</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Credits</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">License</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Source Code</a></li>\n</ul>\n<h2 id=\"installation\" tabindex=\"-1\">Installation <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li>You can get the source <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio\">code here on GitHub</a>.\nThe project was build and tested in Fedora Linux using Firefox and Falkon as chat clients to check function on both the Gecko and QtWebKit browser engines. It should work in Chrome as well, since QtWebKit is based on Chromium's web engine.</li>\n</ul>\n<p>Python verion 3.11.3 and pip version 23.1.2 were used to develop this project. To install once these prerequisites are installed:</p>\n<ul>\n<li>\n<p>Navigate to the project directory in a terminal</p>\n</li>\n<li>\n<p>Run <code>pip install -r requirements.txt</code> in the working directory of this project (or your virtual environment for the project)</p>\n</li>\n<li>\n<p>pip will install Flask and flask-socketio (Flask==2.3.2 &amp; flask-socketio==5.3.4)</p>\n</li>\n<li>\n<p>run the project with <code>python main.py</code></p>\n</li>\n<li>\n<p>if this step fails try <code>python3 main.py</code></p>\n</li>\n<li>\n<p>The development server runs by default to http://127.0.0.1:5000 and can be stopped with CTRL+C.</p>\n</li>\n</ul>\n<h2 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li>\n<p>To use the project locally, go to the default URL:port. If you are using only one browser, you will need to open on client in private mode (so the server views your sessions as different users).</p>\n</li>\n<li>\n<p>There is a default Flask secret key that should be changed if this project is going to be used on a public server.</p>\n</li>\n<li>\n<p>Currently room names are randomly generated and are all capital letters.</p>\n</li>\n<li>\n<p>Open the browser and go to the appropriate URL.</p>\n</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/ZXXTILOHTj-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/ZXXTILOHTj-889.webp 889w\"><img alt=\"Maria creates a chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/ZXXTILOHTj-889.png\" width=\"889\" height=\"651\"></picture></p>\n<ul>\n<li>Enter your desired chat name, then click <strong>Create New Chat Room</strong></li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/dcYYkBLhmn-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/dcYYkBLhmn-889.webp 889w\"><img alt=\"Maria enters the chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/dcYYkBLhmn-889.png\" width=\"889\" height=\"651\"></picture></p>\n<ul>\n<li>When a user joins a room there is a broadcast timestamp to all room users. The room code is at the top.\nIn the example it is <strong>TLBSWGOC</strong></li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/fNt69GYJOs-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/fNt69GYJOs-889.webp 889w\"><img alt=\"Pete joins Maria's chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/fNt69GYJOs-889.png\" width=\"889\" height=\"1376\"></picture></p>\n<ul>\n<li>Other users can join the existing rooms if they have the room code by entering their handle and the code into\nthe appropriate spaces and then clicking <strong>Join Room</strong>. All previous messages in the room will be displayed for them (but not previous user join/disconnection messages).</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/rPjC6GWz3I-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/rPjC6GWz3I-889.webp 889w\"><img alt=\"Maria and Pete can chat\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/rPjC6GWz3I-889.png\" width=\"889\" height=\"1360\"></picture></p>\n<ul>\n<li>The users can now chat by typing their messages and clicking <strong>Send Message</strong>. Messages will get a time stamp and\nbe stored by the server per room. They are not stored in a database so they are lost if the server is shut down. A user's joining and leaving timestamps are not saved.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/TvJCsSiSt_-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/TvJCsSiSt_-889.webp 889w\"><img alt=\"Pete disconnects from Maria's chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/TvJCsSiSt_-889.png\" width=\"889\" height=\"1369\"></picture></p>\n<ul>\n<li>By clicking <strong>Leave Room</strong> a user can exit the room and go back to the landing screen. The disconnection timestamp\ntakes about 40 seconds to broadcast to the room.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/EuDV45i-rq-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/EuDV45i-rq-889.webp 889w\"><img alt=\"Pete rejoins Maria's chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/EuDV45i-rq-889.png\" width=\"889\" height=\"1378\"></picture></p>\n<ul>\n<li>Users can rejoin chatrooms in the same way they joined before. All previous messages are displayed when they rejoin.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/nH4QE955SD-1761.avif 1761w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/nH4QE955SD-1761.webp 1761w\"><img alt=\"Pete creates another chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/nH4QE955SD-1761.png\" width=\"1761\" height=\"1360\"></picture></p>\n<ul>\n<li>\n<p>Users can have multiple rooms at once. Messages are stored per room.</p>\n</li>\n<li>\n<p>When there are no more users in the room, it is deleted from the server and the messages are also removed.</p>\n</li>\n<li>\n<p>When you are done, the server can be stopped with <code>CTRL+C</code> in the terminal.</p>\n</li>\n</ul>\n<h2 id=\"credits\" tabindex=\"-1\">Credits <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>I followed <a href=\"https://www.youtube.com/@TechWithTim\">Tech With Tim's</a> <a href=\"https://www.youtube.com/watch?v=mkXdvs8H7TA\">Python Live Chat Room Tutorial Using Flask &amp; SocketIO</a> tutorial for this project.</p>\n<p>I extended it a bit beyond the tutorial, adding server based time stamps and a &quot;leave room&quot; button. I think further extending it to allow users do have different chat room colors and name colors and selecting room codes would be a good next step. Additonally, hooking up a database to store messages and perhaps only indexing a fixed amount of messages when a user joins would be another worthwhile improvement.</p>\n<p><a href=\"https://flask-socketio.readthedocs.io/en/latest/intro.html\">Flask-SocketIO's documentation</a> was very helpful in getting a grasp with how messages are emitted and broadcast, how rooms are constructed, and other tips.</p>\n<h2 id=\"license\" tabindex=\"-1\">License <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>Licensed under the <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio/blob/main/LICENSE\">MIT</a> license.</p>\n<h2 id=\"code\" tabindex=\"-1\">Code <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>The <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio\">source code is here on my GitHub</a>.</p>\n",
			"date_published": "2023-06-24T00:00:00Z"
		}
		,
		{
			"id": "https://shanedewar.com/blog/post1/",
			"url": "https://shanedewar.com/blog/post1/",
			"title": "Shane&#39;s first post.",
			"content_html": "<h2 id=\"hi-i-m-shane\" tabindex=\"-1\">Hi I'm Shane 👋 <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/post1/\">#</a></h2>\n<p>Welcome to my portfolio site built off of <a href=\"https://www.11ty.dev/\">eleventy</a> and hosted on GitHub Pages. Besides connecting my <a href=\"https://github.com/ShaneDewar\">GitHub</a> and <a href=\"https://linkedin.com/in/shane-dewar/\">LinkedIn</a> to my porfolio, as time progresses more of my projects will be published here with some information about why I made them, some examples of how they work, screenshots, etc.</p>\n<pre class=\"language-py\" tabindex=\"0\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World!'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Feel free to send me a message or connect with me at any of my links below!</p>\n",
			"date_published": "2023-06-21T00:00:00Z"
		}
		
	]
}
