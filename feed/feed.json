{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Shane Dewar - Software Developer",
	"language": "en",
	"home_page_url": "https://shanedewar.com/",
	"feed_url": "https://shanedewar.com/feed/feed.json",
	"description": "Join me in my explorations in computer science.",
	"author": {
		"name": "Shane Dewar",
		"url": "https://shanedewar.com/about-me/"
	},
	"items": [
		{
			"id": "https://shanedewar.com/blog/flask-oauth2-restful-api/",
			"url": "https://shanedewar.com/blog/flask-oauth2-restful-api/",
			"title": "RESTful API using Flask with Server Side Authentication and Authorization via Google Login using OAuth2.0",
			"content_html": "<h1 id=\"\" tabindex=\"-1\"><RESTful-API-Flask-OAuth-GCP> <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></RESTful-API-Flask-OAuth-GCP></h1>\n<h2 id=\"description\" tabindex=\"-1\">Description <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></h2>\n<p>While going through some past projects I decided I wanted to revisit a RESTful API general inventory project I built about a year and a half ago. The project was build using Flask and hosted on GCP and RESTfully implements whatever custom schema is designed for the database. Users have to be authenticated and authorized before they gain access, and the API handles multiple errors with the proper responses. The API accepts properly formatted JSON requests that provide authorized user credentials via a user_ID and a JSON Web Token. I used Postman to access and test it when I first built it. Besides deciding I wanted to refactor the code and perhaps built a front end for it, I found some older diagrams of how I thought the authentication and authorization would work for the app from the time around the start of the project. I decided I would make a new diagram of the flow prior to refactoring the current code to fix some issues in the older diagrams and reacquaint myself with the server access flow in the app. An older diagram can be found at the bottom of the post.</p>\n<p>One of the original goals of the project was to better solidify my understanding of authentication and authorization steps and how to use them to allow an outside client tool, such as Postman, to use one of my projects. I chose Google's array of services and APIs to control database API access since it is widespread and easily recognizable as well as allowing fine grain permissions to be requested of the user. Besides being familiar to most users, the Google Login path gave access to incremental scope requests and consent is easy for users to revoke. The app was run in App Engine on Google Cloud Platform and the database the API accessed was a NoSQL structure stored in Firestore in Datastore mode on GCP. Utilizing Google's APIs to assist authentication, authorization and authorization token verification streamlined the process. OpenID Connect, an authentication layer built on top of OAuth 2.0, was the authentication protocol used via Google People API to interact with Google Login to get user content and identity verification from Google. OAuth 2.0 was used for authorization, this time through Google's Cloud Identity service to generate the OAuth 2.0 JWT token (cryptographically signed by Google, in this case). It only made sense to chose to use Google's OAuth 2.0 verify service to make sure the token was valid, including proper signature, not expired, etc.</p>\n<p>More details on the RESTful inventory API: It can be implemented to grant custom CRUD ability to users following whatever schema is needed by the client. For example, it was tested as a marina which would have slips which could be in use or not in use, the boats could have ownership data attached, fees, etc. Users could have multiple boats and couldn't access boats they didn't own. The API was then reconfigured to represent a general inventory database for a bicycle shop, allowing the user to create new bicycles, remove sold bicycles, update the prices of the bicycles, as well as track customer data, repairs, employees, and inventory. For example, a bicycle coming in for repair that needs new tires could come in and be tagged with a date received, date due, estimated cost, customer info, mechanic assigned to the repair, etc. Once finished, the bicycle could be updated with the new info and the customer easily informed. An employee user could attach inventory items such as the new tires to the bicycle, removing them from free inventory and adding them to the repair cost from one place. For testing, the current API code treats all valid users as having full CRUD access. However, user groups can be configured and controlled either by creating different IAM access roles using the Admin API or by having the app request permission from the administrator before being granted access.</p>\n<h2 id=\"table-of-contents\" tabindex=\"-1\">Table of Contents <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></h2>\n<ul>\n<li><a href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">Description</a></li>\n<li><a href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">Diagram</a></li>\n<li><a href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">Steps</a></li>\n<li><a href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">Old Diagram</a></li>\n</ul>\n<h2 id=\"diagram\" tabindex=\"-1\">Diagram <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></h2>\n<p><a href=\"https://shanedewar.com/img/FSEh81ikBk-1281.avif\"><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/FSEh81ikBk-1281.avif 1281w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/FSEh81ikBk-1281.webp 1281w\"><img alt=\"A lovely diagram of the process used for server side authentication and authorization for my RESTful API app\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/FSEh81ikBk-1281.png\" width=\"1281\" height=\"842\"></picture>\nClick for larger version</a></p>\n<h2 id=\"steps\" tabindex=\"-1\">Steps <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></h2>\n<p><strong>Step 1:</strong> User goes to the public <code>welcome</code> page for the app in their browser to gain access.</p>\n<p><strong>Step 2:</strong> If the user has good credentials in their session data they are redirected to the <code>oauth</code> page (step 10) which shows their <strong>JWT</strong> and <strong>user ID</strong>.\nOtherwise the app continues to step 3. In the diagram the server is Flask based and running in App Engine on Google Cloud Platform.</p>\n<p><strong>Step 3:</strong> The server generates a unique state code shared between the client and server. The server stores this in the database in Datastore. Google calls this an <em>anti-forgery state token</em> and they are also known as <em>cross-site request forgery tokens</em>.</p>\n<p><strong>Step 4:</strong> Next the server builds an authentication request sent to OpenID Connect via the Google People API containing <code>client_id</code>, <code>scope</code> requested, client <code>state</code> code and the <code>redirect_uri</code>. This is sent to Google as an HTTPS <code>GET</code> request.</p>\n<p><strong>Step 5:</strong> User then sees a prompt from Google in the browser asking if they want to allow the requested scope to the app and decides to allow or not allow these permission to the app. This is the <em>user consent</em> step. The user can revoke this consent at any time from their Google Account.</p>\n<p><strong>Step 6:</strong> Google redirects the user back to the App and sends a response to the specified endpoint at the server. If the user did not permit access, Google will return an error.</p>\n<p><strong>Step 7:</strong> If the user allowed the requested permissions, the response from Google contains the original client <code>state</code> code and a one time authorization <code>code</code> that will be used to produce a <strong>JWT</strong> authorization token. The server verifies that the <code>state</code> code (<em>cross-site request forgery token</em>) provided by Google matches the original <code>state</code> code the server generated by retrieving it from the Datastore. If the <code>state</code> codes don't match, or if the user declined to authenticate, they are redirected back to the starting &quot;welcome&quot; page. If the <code>state</code> codes match, the user is considered authenticated via Google by the app and this <code>state</code> code is deleted from Datastore database.</p>\n<p><strong>Step 8:</strong> The app then forms a <code>POST</code> request containing the one time authorization <code>code</code>, the <code>client_id</code>, and <code>client_secret</code>, the <code>redirect_uri</code> and the <code>grant_type</code> parameters for an authorization code per OAuth 2.0 specification. This is sent to Google Identity via the Google OAuth2 API. Google verifies the code and responds with a <em>authorization token</em>, also known as an <em>ID token</em>, which is a <em>JSON Web Token</em> (<strong>JWT</strong>) which is a signed Base64-encoded JSON object.</p>\n<p><strong>Step 9:</strong> The <strong>JWT</strong> is sent to Google OAuth2.0 service by the server to validate the signature, issuer validity, that theexpiration time is valid and so forth. If Google validates it, a unique <em>claim</em> or field from the token, named <code>sub</code>, is extracted to be used as the user's unique <strong>user ID</strong> for accessing the CRUD API. This verification process is repeated with the <strong>JWT</strong> every time an API call is made, such as retrieving, updating or deleting data on the server, however the user's unique ID doesn't change after initial issue. Tokens  have a finite lifespan before they need to be refreshed. User can revoke consent at any time via their Google Account. The unique <strong>user ID</strong> is stored in the database in Datastore by the server.</p>\n<p><strong>Step 10:</strong> Once the <strong>JWT</strong> has been verified the first time, and the unique <strong>user ID</strong> have been extracted the server redirects the client's browser to a <code>oauth</code> page which displays the user's <strong>unique ID</strong> and <strong>JWT</strong>.</p>\n<p><strong>Step 11:</strong> The user can copy these credentials to access the CRUD API and manipulate the database. If the <strong>JWT</strong> expires or permission is revoked access will be lost until these are rectified, but the data in the database won't be lost. The requests to the API must be sent in <code>JSON</code> format, and the <strong>JWT</strong> token is expected to be sent within an <code>Authorization</code> request header. HTTPS can be enforced for these requests. Additionally, the API will handle and respond to the client with status codes including <code>200 OK</code>, <code>201 Created</code>, <code>204 No Content</code>, <code>400 Bad Request</code>, <code>401 Unauthorized</code>, <code>403 Forbidden</code>, <code>404 Resource Not Found</code>, and <code>405 Method Not Allowed</code> as appropriate to requests.</p>\n<p><strong>Step 12:</strong> A user can use the credentials to make API calls with any program that can properly format the <code>JSON</code> requests and pass the <strong>JWT</strong> token and <strong>user ID</strong> to the correct operation paths for the API, such as Postman. The API has use case specific customized entity routes. For example, a bicycle shop may use it to maintain it's database of bicycles, using the API to add new bicycles, reprice current bicycles, and remove sold bicycles. Entities can be expanded extensively. The bicycle shop may also maintain repair bills, inventory, rentals or customer information with whatever scope of operations are needed as described at the beginning of the post.</p>\n<p><strong>Step 13:</strong> For example, the user requests to update the price of an item in the database at the correct route location. This goes from Postman in this example via <code>HTTPS</code> to the server. The server validates the <strong>JWT</strong> token first, if this fails a 401 response code and a message saying the token failed validation is returned. Next it checks for <code>JSON</code> formatting and that the request expects a <code>JSON</code> response. Other errors in the request are handled similarly.</p>\n<p><strong>Step 14:</strong> If the request succeeds then the server accesses the database in Datastore and makes the change.</p>\n<p><strong>Step 15:</strong> A verification that the request succeeded is sent back in <code>JSON</code> format with a <code>200</code> or <code>201</code> status code to the user from the server as appropriate. The user can repeat this process as much as needed while the authentication and authorization are permitted and valid.</p>\n<h2 id=\"old-diagram\" tabindex=\"-1\">Old Diagram <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">#</a></h2>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/lIATazkZfh-891.avif 891w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/lIATazkZfh-891.webp 891w\"><img alt=\"A less lovely diagram of server side authentication and authorization for my RESTful API app\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/lIATazkZfh-891.png\" width=\"891\" height=\"1171\"></picture></p>\n<ul>\n<li><a href=\"https://shanedewar.com/blog/flask-oauth2-restful-api/\">Table of Contents</a></li>\n</ul>\n",
			"date_published": "2023-07-05T00:00:00Z"
		}
		,
		{
			"id": "https://shanedewar.com/blog/live-chat-python-flask-socketio/",
			"url": "https://shanedewar.com/blog/live-chat-python-flask-socketio/",
			"title": "Live Chat with Python, Flask and Flask-SocketIO.",
			"content_html": "<h1 id=\"\" tabindex=\"-1\"><Live-Chat-Python-Flask-SocketIO> <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></Live-Chat-Python-Flask-SocketIO></h1>\n<h2 id=\"description\" tabindex=\"-1\">Description <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>This project was created to experiment with a light real time chat program which works in a browser using Flask. The SocketIO protocol appeared as a great option after a little investigation and the direction I decided to pursue. There are numerous implementations of the SocketIO protocol and I chose to use the flask-socketio package which provides &quot;low latency bi-directional communications between the clients and the server.&quot; This was exactly what I was looking for. Additionally, by using the SocketIO protocol, clients have already been  implemented in Python, JavaScript, Swift, Java, C++, and as long as the SocketIO client protocol is implemented a client can be built for a huge array of platforms.</p>\n<p>A feature I found attractive about SocketIO besides the low latency event based messaging was the ability to message to groups of users by rooms. This fit into the &quot;chat room&quot; concept very neatly and made SocketIO the clear choice. It was easy to find a good guide fitting the concept from <a href=\"https://www.youtube.com/@TechWithTim\">Tech With Tim's</a> <a href=\"https://www.youtube.com/watch?v=mkXdvs8H7TA\">Python Live Chat Room Tutorial Using Flask &amp; SocketIO</a>. I used the tutorial as a starting point and have extended it slightly. I added a Leave Room button and server side timestamp generation which is stored with the messages as they're sent. I decided this would be a good simple project to build out a more involved GitHub README setup guide for after getting the project up and running.</p>\n<p>Some potential future features could be users having the ability to name the chatrooms, perhaps enabling different colors for each user name or some other way to make users easier to distinguish when talking in a room, and adding a database to store messages in a persistant way. Additionally, I am not sold on the message log storage implementaton and think that I would modify it to display a fixed amount of previous messages upon joining a room to limit server load, storage size, and latency to the user.</p>\n<h2 id=\"table-of-contents\" tabindex=\"-1\">Table of Contents <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Installation</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Usage</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Credits</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">License</a></li>\n<li><a href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">Source Code</a></li>\n</ul>\n<h2 id=\"installation\" tabindex=\"-1\">Installation <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li>You can get the source <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio\">code here on GitHub</a>.\nThe project was build and tested in Fedora Linux using Firefox and Falkon as chat clients to check function on both the Gecko and QtWebKit browser engines. It should work in Chrome as well, since QtWebKit is based on Chromium's web engine.</li>\n</ul>\n<p>Python verion 3.11.3 and pip version 23.1.2 were used to develop this project. To install once these prerequisites are installed:</p>\n<ul>\n<li>\n<p>Navigate to the project directory in a terminal</p>\n</li>\n<li>\n<p>Run <code>pip install -r requirements.txt</code> in the working directory of this project (or your virtual environment for the project)</p>\n</li>\n<li>\n<p>pip will install Flask and flask-socketio (Flask==2.3.2 &amp; flask-socketio==5.3.4)</p>\n</li>\n<li>\n<p>run the project with <code>python main.py</code></p>\n</li>\n<li>\n<p>if this step fails try <code>python3 main.py</code></p>\n</li>\n<li>\n<p>The development server runs by default to http://127.0.0.1:5000 and can be stopped with CTRL+C.</p>\n</li>\n</ul>\n<h2 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<ul>\n<li>\n<p>To use the project locally, go to the default URL:port. If you are using only one browser, you will need to open on client in private mode (so the server views your sessions as different users).</p>\n</li>\n<li>\n<p>There is a default Flask secret key that should be changed if this project is going to be used on a public server.</p>\n</li>\n<li>\n<p>Currently room names are randomly generated and are all capital letters.</p>\n</li>\n<li>\n<p>Open the browser and go to the appropriate URL.</p>\n</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/ZXXTILOHTj-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/ZXXTILOHTj-889.webp 889w\"><img alt=\"Maria creates a chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/ZXXTILOHTj-889.png\" width=\"889\" height=\"651\"></picture></p>\n<ul>\n<li>Enter your desired chat name, then click <strong>Create New Chat Room</strong></li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/dcYYkBLhmn-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/dcYYkBLhmn-889.webp 889w\"><img alt=\"Maria enters the chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/dcYYkBLhmn-889.png\" width=\"889\" height=\"651\"></picture></p>\n<ul>\n<li>When a user joins a room there is a broadcast timestamp to all room users. The room code is at the top.\nIn the example it is <strong>TLBSWGOC</strong></li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/fNt69GYJOs-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/fNt69GYJOs-889.webp 889w\"><img alt=\"Pete joins Maria's chat room\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/fNt69GYJOs-889.png\" width=\"889\" height=\"1376\"></picture></p>\n<ul>\n<li>Other users can join the existing rooms if they have the room code by entering their handle and the code into\nthe appropriate spaces and then clicking <strong>Join Room</strong>. All previous messages in the room will be displayed for them (but not previous user join/disconnection messages).</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/rPjC6GWz3I-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/rPjC6GWz3I-889.webp 889w\"><img alt=\"Maria and Pete can chat\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/rPjC6GWz3I-889.png\" width=\"889\" height=\"1360\"></picture></p>\n<ul>\n<li>The users can now chat by typing their messages and clicking <strong>Send Message</strong>. Messages will get a time stamp and\nbe stored by the server per room. They are not stored in a database so they are lost if the server is shut down. A user's joining and leaving timestamps are not saved.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/TvJCsSiSt_-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/TvJCsSiSt_-889.webp 889w\"><img alt=\"Pete disconnects from Maria's chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/TvJCsSiSt_-889.png\" width=\"889\" height=\"1369\"></picture></p>\n<ul>\n<li>By clicking <strong>Leave Room</strong> a user can exit the room and go back to the landing screen. The disconnection timestamp\ntakes about 40 seconds to broadcast to the room.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/EuDV45i-rq-889.avif 889w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/EuDV45i-rq-889.webp 889w\"><img alt=\"Pete rejoins Maria's chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/EuDV45i-rq-889.png\" width=\"889\" height=\"1378\"></picture></p>\n<ul>\n<li>Users can rejoin chatrooms in the same way they joined before. All previous messages are displayed when they rejoin.</li>\n</ul>\n<p><picture><source type=\"image/avif\" srcset=\"https://shanedewar.com/img/nH4QE955SD-1761.avif 1761w\"><source type=\"image/webp\" srcset=\"https://shanedewar.com/img/nH4QE955SD-1761.webp 1761w\"><img alt=\"Pete creates another chatroom\" loading=\"lazy\" decoding=\"async\" src=\"https://shanedewar.com/img/nH4QE955SD-1761.png\" width=\"1761\" height=\"1360\"></picture></p>\n<ul>\n<li>\n<p>Users can have multiple rooms at once. Messages are stored per room.</p>\n</li>\n<li>\n<p>When there are no more users in the room, it is deleted from the server and the messages are also removed.</p>\n</li>\n<li>\n<p>When you are done, the server can be stopped with <code>CTRL+C</code> in the terminal.</p>\n</li>\n</ul>\n<h2 id=\"credits\" tabindex=\"-1\">Credits <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>I followed <a href=\"https://www.youtube.com/@TechWithTim\">Tech With Tim's</a> <a href=\"https://www.youtube.com/watch?v=mkXdvs8H7TA\">Python Live Chat Room Tutorial Using Flask &amp; SocketIO</a> tutorial for this project.</p>\n<p>I extended it a bit beyond the tutorial, adding server based time stamps and a &quot;leave room&quot; button. I think further extending it to allow users do have different chat room colors and name colors and selecting room codes would be a good next step. Additonally, hooking up a database to store messages and perhaps only indexing a fixed amount of messages when a user joins would be another worthwhile improvement.</p>\n<p><a href=\"https://flask-socketio.readthedocs.io/en/latest/intro.html\">Flask-SocketIO's documentation</a> was very helpful in getting a grasp with how messages are emitted and broadcast, how rooms are constructed, and other tips.</p>\n<h2 id=\"license\" tabindex=\"-1\">License <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>Licensed under the <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio/blob/main/LICENSE\">MIT</a> license.</p>\n<h2 id=\"code\" tabindex=\"-1\">Code <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/live-chat-python-flask-socketio/\">#</a></h2>\n<p>The <a href=\"https://github.com/ShaneDewar/live-chat-python-flask-socketio\">source code is here on my GitHub</a>.</p>\n",
			"date_published": "2023-06-24T00:00:00Z"
		}
		,
		{
			"id": "https://shanedewar.com/blog/post1/",
			"url": "https://shanedewar.com/blog/post1/",
			"title": "Shane&#39;s first post.",
			"content_html": "<h2 id=\"hi-i-m-shane\" tabindex=\"-1\">Hi I'm Shane 👋 <a class=\"header-anchor\" href=\"https://shanedewar.com/blog/post1/\">#</a></h2>\n<p>Welcome to my portfolio site built off of <a href=\"https://www.11ty.dev/\">eleventy</a> and hosted on GitHub Pages. Besides connecting my <a href=\"https://github.com/ShaneDewar\">GitHub</a> and <a href=\"https://linkedin.com/in/shane-dewar/\">LinkedIn</a> to my porfolio, as time progresses more of my projects will be published here with some information about why I made them, some examples of how they work, screenshots, etc.</p>\n<pre class=\"language-py\" tabindex=\"0\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World!'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Feel free to send me a message or connect with me at any of my links below!</p>\n",
			"date_published": "2023-06-21T00:00:00Z"
		}
		
	]
}
